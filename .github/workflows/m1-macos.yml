name: M1 macOS Build

on: [push, pull_request]
jobs:
  build_native_wallet:
    name: Native-${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.pivx-params
      WINEDEBUG: fixme-all
      BOOST_TEST_RANDOM: 1 # random seed based on the current time
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: arm64-macOS-11
            id: macOS11-nodepends
            os: macOS-11-M1
            host: arm64-apple-darwin20.6.0
            brew_install: autoconf automake ccache berkeley-db4 libtool boost miniupnpc pkg-config python@3.8 qt5 zmq libevent qrencode gmp libsodium rust librsvg
            unit_tests: true
            functional_tests: true
            goal: deploy
            cc: clang
            cxx: clang++
            BITCOIN_CONFIG: "--enable-zmq --enable-gui --enable-reduce-exports --enable-werror"

    steps:
      - name: Get Source
        uses: actions/checkout@v3

      - name: Setup Environment
        run: |
          brew install ${{ matrix.config.brew_install }}
          pip3.8 install ds_store mac_alias

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        run: echo "timestamp=$(date +%Y-%m-%dT%H:%M:%S%z)" >> $GITHUB_OUTPUT

      - name: ccache cache files
        uses: actions/cache@v3
        with:
          path: |
            .ccache
            .pivx-params
          key: ${{ matrix.config.id }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.id }}-ccache-

      - name: Build Syslib Wallet
        run: |
          export LC_ALL=C.UTF-8

          echo $CCACHE_DIR
          echo $PARAMS_DIR

          PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
          # Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.
          PATH=$PATH:/usr/lib/llvm-6.0/bin/
          export PATH

          CC=${{ matrix.config.cc }}
          CXX=${{ matrix.config.cxx }}
          export CC
          export CXX

          if [ "${{ matrix.config.unit_tests }}" = "true" ] || [ "${{ matrix.config.functional_tests }}" = "true" ]; then
            mkdir -p $PARAMS_DIR
            PARAMS_FLAGS="--with-params-dir=$PARAMS_DIR"
          fi

          echo ::group::Autogen
          ./autogen.sh
          echo ::endgroup::

          mkdir build && cd build

          echo ::group::Configure
          ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL ${{ matrix.config.BITCOIN_CONFIG }} $PARAMS_FLAGS || ( cat config.log && false)
          echo ::endgroup::

          echo ::group::Distdir
          make distdir VERSION=${{ matrix.config.host }}
          echo ::endgroup::

          cd pivx-${{ matrix.config.host }}

          echo ::group::Configure
          ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL ${{ matrix.config.BITCOIN_CONFIG }} $PARAMS_FLAGS || ( cat config.log && false)
          echo ::endgroup

          echo ::group::Build
          make -j2 ${{ matrix.config.goal }} || ( echo "Build failure. Verbose build follows." && make ${{ matrix.config.goal }} V=1 ; false )
          echo ::endgroup::

          if [ "${{ matrix.config.unit_tests }}" = "true" ] || [ "${{ matrix.config.functional_tests }}" = "true" ]; then
            echo ::group::Params
            ./params/install-params.sh $PARAMS_DIR
            echo ::endgroup::
          fi

          if [ "${{ matrix.config.unit_tests }}" = "true" ]; then
            echo ::group::Unit-Tests
            make -j2 check VERBOSE=1
            echo ::endgroup::
          fi

          if [ "${{ matrix.config.functional_tests }}" = "true" ]; then
            echo ::group::Functional-Tests
            test/functional/test_runner.py --combinedlogslen=4000 ${{ matrix.config.test_runner_extra }}
            echo ::endgroup::
          fi
